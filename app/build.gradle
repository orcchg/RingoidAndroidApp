rootProject.appPlugins.each {
    apply plugin: it
}
if (!project.hasProperty("disable-firebase-performance-plugin")) {
    apply plugin: 'com.google.firebase.firebase-perf'
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    defaultConfig {
        applicationId rootProject.ext.androidApplicationId

        manifestPlaceholders = [appName:"${rootProject.ext.appName}"]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
//        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    def appDependencies = rootProject.ext.appDependencies
    def androidTestAppDeps = rootProject.ext.androidTestAppDeps
    def testAppDependencies = rootProject.ext.testAppDependencies

    appDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
    testAppDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
    androidTestAppDeps.each {
        add(it.configuration, it.dependency, it.options)
    }
}

// ------------------------------------------------------------------------------------------------
List<String> sngLanguages = ['ba', 'be', 'bg', 'ce', 'cv', 'et',
                             'kk', 'kv', 'lt', 'lv', 'mk', 'os',
                             'pl', 'sah', 'sk', 'sl', 'tt', 'ua', 'uk']

static String listToJavaArray(List<String> list) {
    String result = ""
    list.each { item -> result += (result.empty ? "" : ",") + "\"${item}\"" }
    return "{${result}}"
}

android.applicationVariants.all { variant ->
    variant.mergeResources.doFirst {
        File tmpResDir = file(buildDir.absolutePath + '/tmp/res')
        if (!tmpResDir.exists()) {
            tmpResDir.mkdirs()
        }
        sngLanguages.each { language ->
            File languageDir = file(tmpResDir.absolutePath + "/values-${language}")
            if (!languageDir.exists()) {
                languageDir.mkdirs()
            }
            copy {
                from rootDir.absolutePath + '/feature/origin/src/main/res/values-ru/'
                into languageDir.absolutePath
            }
        }
        android.sourceSets['main'].res.srcDirs += tmpResDir.absolutePath
    }

    def flavor = variant.mergedFlavor
    variant.outputs.all { output ->
        def flavorName = variant.name.replace("Release", "")
        def name = flavorName + "-" + flavor.versionName + "-b" + flavor.versionCode
        name = name + ".apk"
        outputFileName = name
    }
}

// ------------------------------------------------------------------------------------------------
/**
 * Creates google-services.json file from predefined content
 */
task generateGmsJson(type: Copy) {
    def output = 'google-services.json'
    def filename = ""
    if (rootProject.ext.isStaging) {
        filename = 'google-services_staging.json'
    } else if (rootProject.ext.isDevelop) {
        filename = 'google-services_develop.json'
    } else {
        filename = 'google-services_production.json'
    }
    copy {
        from projectDir.absolutePath + '/' + filename
        into '.'
        rename (filename, output)
    }
}

gradle.afterProject { project, projectState ->
    if (projectState.failure) {
        println "Evaluation of $project FAILED"
    } else {
        println "Evaluation of $project SUCCEEDED"
        generateGmsJson
    }
}

// ------------------------------------------------------------------------------------------------
rootProject.appPluginsAtBottom.each {
    apply plugin: it
}
