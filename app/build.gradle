rootProject.appPlugins.each {
    apply plugin: it
}
if (!project.hasProperty("disable-firebase-performance-plugin")) {
    apply plugin: 'com.google.firebase.firebase-perf'
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.androidApplicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.androidVersionCode
        versionName rootProject.ext.androidVersionName
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner

        manifestPlaceholders = [appName:"${rootProject.ext.appName}"]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
        }
    }
}

dependencies {
    def appDependencies = rootProject.ext.appDependencies
    def androidTestAppDeps = rootProject.ext.androidTestAppDeps
    def testAppDependencies = rootProject.ext.testAppDependencies

    appDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
    testAppDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
    androidTestAppDeps.each {
        add(it.configuration, it.dependency, it.options)
    }
}

android.applicationVariants.all { variant ->
    def flavor = variant.mergedFlavor
    variant.outputs.all { output ->
        def flavorName = variant.name.replace("Release", "")
        def name = flavorName + "-" + flavor.versionName + "-b" + flavor.versionCode
        name = name + ".apk"
        outputFileName = name
    }
}

// ------------------------------------------------------------------------------------------------
/**
 * Creates google-services.json file from predefined content
 */
task generateGmsJson(type: Copy) {
    def output = 'google-services.json'
    def filename = ""
    if (rootProject.ext.isStaging) {
        filename = 'google-services_staging.json'
    } else if (rootProject.ext.isDevelop) {
        filename = 'google-services_develop.json'
    } else {
        filename = 'google-services_production.json'
    }
    copy {
        from projectDir.absolutePath + '/' + filename
        into '.'
        rename (filename, output)
    }
}

gradle.afterProject { project, projectState ->
    if (projectState.failure) {
        println "Evaluation of $project FAILED"
    } else {
        println "Evaluation of $project SUCCEEDED"
        generateGmsJson
    }
}

// ------------------------------------------------------------------------------------------------
rootProject.appPluginsAtBottom.each {
    apply plugin: it
}
